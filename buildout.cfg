# Development/production environment buildout
# ================================

[buildout]
parts =
    instance
    test
#    coverage-report
#    omelette
#    zopepy
#    zopeskel
    checkversions
#    mkrelease
    cmds
    repozo
    backup
    backup-template
    backup-schedule
    nginx-configuration
    make-dirs
    start_on_reboot

extends =
    packages.cfg

# Packages to check out/update when buildout is run
auto-checkout =
    oaxaca.policy
    oaxaca.newcontent
    plone.formwidget.masterselect
    
# Make sure buildout always attempts to update packages
always-checkout = force

[cmds]
recipe = plone.recipe.command
update-command = ${cmds:command}
command =
  chmod 600 .installed.cfg
  cat > ${buildout:directory}/bin/sitecustomize.py << EOF
  import sys
  sys.setdefaultencoding('utf-8')
  EOF

# Development Zope instance. Installs the ``bin/instance`` script
[instance]
recipe = plone.recipe.zope2instance
http-address = 8092
user = admin:ValentinCampa
verbose-security = on
blob-storage = var/blobstorage
eggs =
    ${eggs:main}
#    ${eggs:devtools}

# Test runner. Run: ``bin/test`` to execute all tests
[test]
recipe = zc.recipe.testrunner
eggs = ${eggs:test}
defaults = ['--auto-color', '--auto-progress']

# Coverage report generator.
# Run: ``bin/test --coverage=coverage``
# and then: ``bin/coveragereport``
#[coverage-report]
#recipe = zc.recipe.egg
#eggs = z3c.coverage
#scripts = coveragereport
#arguments = ('parts/test/coverage', 'coverage')

# Installs links to all installed packages to ``parts/omelette``.
# On Windows, you need to install junction.exe first
#[omelette]
#recipe = collective.recipe.omelette
#eggs = 
#    ${eggs:main}
#    ${eggs:devtools}

# Installs the ``bin/zopepy`` interpreter.
#[zopepy]
#recipe = zc.recipe.egg
#eggs = 
#    ${eggs:main}
#    ${eggs:devtools}
#interpreter = zopepy

# Installs ZopeSkel, which can be used to create new packages
# Run: ``bin/zopeskel``
#[zopeskel]
#recipe = zc.recipe.egg
#eggs = ZopeSkel

# Tool to help check for new versions.
# Run: ``bin/checkversions versions.cfg``
[checkversions]
recipe = zc.recipe.egg
eggs = z3c.checkversions [buildout]

# Tool to make releases
# Run: ``bin/mkrelease --help``
[mkrelease]
#recipe = zc.recipe.egg
3eggs = jarn.mkrelease

#############production##################

[repozo]
recipe = zc.recipe.egg
eggs = ZODB3
scripts = repozo

[backup]
recipe = collective.recipe.backup
keep = 4
full = true
gzip = true

[backup-template]
recipe = collective.recipe.template
inline =
    #!/bin/bash
    #Todavia no se como hacer pack
    #${buildout:bin-directory}/zeopack
    ${buildout:bin-directory}/backup -q
    blob=$(basename `ls ${backup:location}|tail -n1` .fsz)
    cd ${buildout:directory}
    tar zcf ${backup:location}/$blob.tar.gz var/blobstorage
    #Solo guardar los ultimos 4 backups
    #Eliminar a partir de la quinta
    toremove=`ls ${backup:location}/*.tar.gz|sort -r|tail -n+5`
    #Podemos mandar cosas a otros servidores usando rsync
    #rsync -a --delete ${backup:location}/ user@host:/home/user/extranet/backups/
    #rsync -a --delete ${buildout:directory}/var/log/user@host:/home/user/extranet/log/
output = ${buildout:bin-directory}/backup.sh
mode = 755

[backup-schedule]
recipe = z3c.recipe.usercrontab
#Correr backup todos los sabados a las 3am
times = 0 0 1 * * 
command = ${backup-template:output}

[nginx-configuration]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/nginx.cfg.in
output = ${buildout:parts-directory}/nginx/nginx.cfg
mode = 644

[make-dirs]
recipe = z3c.recipe.mkdir
remove-on-update = no
paths =
    ${buildout:directory}/var/www
    ${buildout:directory}/var/log/nginx
    ${buildout:directory}/var/run

[start_on_reboot]
recipe = z3c.recipe.usercrontab
times = @reboot
command = ${buildout:directory}/bin/instance start
